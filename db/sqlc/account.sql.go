// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account.sql

package db

import (
	"context"
)

const addAccountBalance = `-- name: AddAccountBalance :one
UPDATE accounts 
SET balance = balance + $2 
WHERE id = $1 
RETURNING id, owner, balance
`

type AddAccountBalanceParams struct {
	ID      int64
	Balance int64
}

func (q *Queries) AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, addAccountBalance, arg.ID, arg.Balance)
	var i Account
	err := row.Scan(&i.ID, &i.Owner, &i.Balance)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, owner, balance FROM accounts 
WHERE id = $1 
FOR UPDATE
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(&i.ID, &i.Owner, &i.Balance)
	return i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT id, owner, balance FROM accounts 
WHERE id = $1 
FOR UPDATE
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountForUpdate, id)
	var i Account
	err := row.Scan(&i.ID, &i.Owner, &i.Balance)
	return i, err
}
