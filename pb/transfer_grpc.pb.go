// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: transfer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransferService_Transfer_FullMethodName           = "/grpcsimplebank.TransferService/Transfer"
	TransferService_GetTransferHistory_FullMethodName = "/grpcsimplebank.TransferService/GetTransferHistory"
	TransferService_BatchTransfer_FullMethodName      = "/grpcsimplebank.TransferService/BatchTransfer"
	TransferService_LiveTransfer_FullMethodName       = "/grpcsimplebank.TransferService/LiveTransfer"
)

// TransferServiceClient is the client API for TransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransferServiceClient interface {
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	// Tambahan: Streaming examples
	GetTransferHistory(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransferResponse], error)
	BatchTransfer(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[TransferRequest, TransferSummary], error)
	LiveTransfer(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TransferRequest, TransferResponse], error)
}

type transferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferServiceClient(cc grpc.ClientConnInterface) TransferServiceClient {
	return &transferServiceClient{cc}
}

func (c *transferServiceClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, TransferService_Transfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) GetTransferHistory(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransferResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransferService_ServiceDesc.Streams[0], TransferService_GetTransferHistory_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HistoryRequest, TransferResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransferService_GetTransferHistoryClient = grpc.ServerStreamingClient[TransferResponse]

func (c *transferServiceClient) BatchTransfer(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[TransferRequest, TransferSummary], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransferService_ServiceDesc.Streams[1], TransferService_BatchTransfer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TransferRequest, TransferSummary]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransferService_BatchTransferClient = grpc.ClientStreamingClient[TransferRequest, TransferSummary]

func (c *transferServiceClient) LiveTransfer(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TransferRequest, TransferResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransferService_ServiceDesc.Streams[2], TransferService_LiveTransfer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TransferRequest, TransferResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransferService_LiveTransferClient = grpc.BidiStreamingClient[TransferRequest, TransferResponse]

// TransferServiceServer is the server API for TransferService service.
// All implementations must embed UnimplementedTransferServiceServer
// for forward compatibility.
type TransferServiceServer interface {
	Transfer(context.Context, *TransferRequest) (*TransferResponse, error)
	// Tambahan: Streaming examples
	GetTransferHistory(*HistoryRequest, grpc.ServerStreamingServer[TransferResponse]) error
	BatchTransfer(grpc.ClientStreamingServer[TransferRequest, TransferSummary]) error
	LiveTransfer(grpc.BidiStreamingServer[TransferRequest, TransferResponse]) error
	mustEmbedUnimplementedTransferServiceServer()
}

// UnimplementedTransferServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransferServiceServer struct{}

func (UnimplementedTransferServiceServer) Transfer(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedTransferServiceServer) GetTransferHistory(*HistoryRequest, grpc.ServerStreamingServer[TransferResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetTransferHistory not implemented")
}
func (UnimplementedTransferServiceServer) BatchTransfer(grpc.ClientStreamingServer[TransferRequest, TransferSummary]) error {
	return status.Errorf(codes.Unimplemented, "method BatchTransfer not implemented")
}
func (UnimplementedTransferServiceServer) LiveTransfer(grpc.BidiStreamingServer[TransferRequest, TransferResponse]) error {
	return status.Errorf(codes.Unimplemented, "method LiveTransfer not implemented")
}
func (UnimplementedTransferServiceServer) mustEmbedUnimplementedTransferServiceServer() {}
func (UnimplementedTransferServiceServer) testEmbeddedByValue()                         {}

// UnsafeTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferServiceServer will
// result in compilation errors.
type UnsafeTransferServiceServer interface {
	mustEmbedUnimplementedTransferServiceServer()
}

func RegisterTransferServiceServer(s grpc.ServiceRegistrar, srv TransferServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransferServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransferService_ServiceDesc, srv)
}

func _TransferService_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_Transfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_GetTransferHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransferServiceServer).GetTransferHistory(m, &grpc.GenericServerStream[HistoryRequest, TransferResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransferService_GetTransferHistoryServer = grpc.ServerStreamingServer[TransferResponse]

func _TransferService_BatchTransfer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransferServiceServer).BatchTransfer(&grpc.GenericServerStream[TransferRequest, TransferSummary]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransferService_BatchTransferServer = grpc.ClientStreamingServer[TransferRequest, TransferSummary]

func _TransferService_LiveTransfer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransferServiceServer).LiveTransfer(&grpc.GenericServerStream[TransferRequest, TransferResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransferService_LiveTransferServer = grpc.BidiStreamingServer[TransferRequest, TransferResponse]

// TransferService_ServiceDesc is the grpc.ServiceDesc for TransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcsimplebank.TransferService",
	HandlerType: (*TransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transfer",
			Handler:    _TransferService_Transfer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTransferHistory",
			Handler:       _TransferService_GetTransferHistory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BatchTransfer",
			Handler:       _TransferService_BatchTransfer_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "LiveTransfer",
			Handler:       _TransferService_LiveTransfer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "transfer.proto",
}
